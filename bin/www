#!/usr/bin/env node

/**
 * Load config file.
 */
var config = require('../config');
var create = require('../app');
var http = require('http');

/**
 * Module dependencies.
 */
var fs = require('fs');
var express = require('express');
const { MongoClient, ServerApiVersion } = require("mongodb");

const mongoUsername = process.env.MONGO_USERNAME;
const mongoPassword = process.env.MONGO_PASSWORD;

var app = express();

// Create a MongoDB Atlas connection string
const uri = `mongodb+srv://${mongoUsername}:${mongoPassword}@eportfolio.rfreo6u.mongodb.net/?retryWrites=true&w=majority`;

// Create a MongoClient without specifying the serverApi version
const client = new MongoClient(uri,  {
  serverApi: {
      version: ServerApiVersion.v1,
      strict: true,
      deprecationErrors: true,
  },
}
);

// Attempt to connect to the MongoDB Atlas cluster
async function run() {
  try {
    // Connect the client to the server (optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
run().catch(console.dir);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

var app = create();
var logger = app.get('logger');

var port = normalizePort(process.env.PORT || config.server.port);
app.set('port', port);

var server;

if (config.server.useHttps) {
  var options = {
    key: fs.readFileSync(config.server.https.keyPath),
    cert: fs.readFileSync(config.server.https.certPath)
  };
  server = https.createServer(options, app);
  console.log('HTTPS server listening on port %s', port);
} else {
  server = http.createServer(app);
  console.log('HTTP server listening on port %s', port);
}

server.listen(port);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}